package com.example.accessingdatamysql.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.accessingdatamysql.model.adminController;
import com.example.accessingdatamysql.service.repo.CourseRepository;
import com.example.accessingdatamysql.service.repo.entity.CourseEntity;

@Service    
public class CourseService {

	@Autowired // This means to get the bean called userRepository which is auto-generated by Spring, we will use it to handle the data
	private CourseRepository courseRepository;

    public List<adminController> findAll() {   
        Iterable<CourseEntity> iter = courseRepository.findAll();
        
        
        List<adminController> ls = new ArrayList<>();    
        iter.forEach(courseEntity -> {
            adminController course = new adminController();
            course.setId(courseEntity.getId());
            course.setName(courseEntity.getName());
            course.setCredit(courseEntity.getCredits());
            course.setMax_seat(courseEntity.getMaxSeat());
            ls.add(course);
        });    
        return ls;    
    }


    public adminController save(adminController course) {
        CourseEntity courseEntity = new CourseEntity();
        courseEntity.setId(course.getId());
		courseEntity.setName(course.getName());
		courseEntity.setCredit(course.getCredit());
		courseEntity.setMaxSeat(course.getMax_Seat());                                         // 0: Expired, 1: Active (Default)


		CourseEntity resultCourseEntity = courseRepository.save(courseEntity);


        adminController resultCourse = new adminController();
        resultCourse.setId(resultCourseEntity.getId());
        resultCourse.setName(resultCourseEntity.getName());
        resultCourse.setCredit(resultCourseEntity.getCredits());
        resultCourse.setMax_seat(resultCourseEntity.getMaxSeat());

        return resultCourse;
    }


    // public int countStudents(boolean isActive) {   
    //     Integer count = studentRepository.countStudents(isActive? 1: 0);
    //     return Optional.ofNullable(count).orElse(0);    
    // }
}
